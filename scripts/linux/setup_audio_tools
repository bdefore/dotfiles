yay -S \
  wine-staging \
  yabridge-bin \
  realtime-privileges

######################
## VSTs VIA YABRIDGE
######################

# yabridge needs adding to the realtime group to exceed memory locking limits
# depends on realtime-priveleges package
# may need a reboot afterward
# https://github.com/robbert-vdh/yabridge#troubleshooting-common-issues
sudo gpasswd -a "$USER" realtime

WINE_PROGRAM_FILES="$HOME/.wine/drive_c/Program Files"
VST_PATH="$WINE_PROGRAM_FILES/Steinberg/VstPlugins"
VST_AUX_PATH="$WINE_PROGRAM_FILES/VstPlugins"
VST3_PATH="$WINE_PROGRAM_FILES/Common Files/VST3"

mkdir -p "$VST_PATH"
mkdir -p "$VST_AUX_PATH"
mkdir -p "$VST3_PATH"
yabridgectl add "$VST_PATH"
yabridgectl add "$VST_AUX_PATH"
yabridgectl add "$VST3_PATH"

LOCAL_ROOT="$HOME/creative"
CLOUD_SERVICE_PATH="b2:creations"
AUDIO_PLUGINS_PATH="audio/plugins"
AUDIO_PLUGIN_CLOUD_ROOT="$CLOUD_SERVICE_PATH/$AUDIO_PLUGINS_PATH"
AUDIO_PLUGIN_LOCAL_DEST="$LOCAL_ROOT/$AUDIO_PLUGINS_PATH"

# setup native linux plugins
rclone copy $AUDIO_PLUGIN_CLOUD_ROOT/linux $AUDIO_PLUGIN_LOCAL_DEST/linux
ln -s $AUDIO_PLUGIN_LOCAL_DEST/linux/vst $HOME/.vst
ln -s $AUDIO_PLUGIN_LOCAL_DEST/linux/vst3 $HOME/.vst3

# setup windows native plugins to be run through yabridge
rclone copy $AUDIO_PLUGIN_CLOUD_ROOT/win/vst "$VST_PATH"
rclone copy $AUDIO_PLUGIN_CLOUD_ROOT/win/vst3 "$VST3_PATH"

yabridgectl status
yabridgectl sync --prune

# note: when installing new plugins via wine, sync them manually to cloud this way:
# - rclone copy "$VST_PATH" "$AUDIO_PLUGIN_CLOUD_ROOT/win/vst"
# - rclone copy "$VST3_PATH" "$AUDIO_PLUGIN_CLOUD_ROOT/win/vst3"

################
## APP SETUP
################

rclone copy $CLOUD_SERVICE_PATH/app-settings $LOCAL_ROOT/app-settings
rclone copy $CLOUD_SERVICE_PATH/apps $LOCAL_ROOT/apps

################
## BITWIG
################

BITWIG_LOCAL_STORE="$LOCAL_ROOT/app-settings/Bitwig Studio"

# sync Bitwig preferences, useful for controller setups
cp -r $LOCAL_ROOT/app-settings/.BitwigStudio/prefs ~/.BitwigStudio/prefs

# sync Bitwig creations (projects, extensions, controller scripts)
# do this before running Bitwig, otherwise a directory will have already been created before this symlink
ln -s "$BITWIG_LOCAL_STORE" ~/Bitwig\ Studio

################
## VCV
################

VCV_LOCAL_STORE="$LOCAL_ROOT/app-settings/Rack2"
VCV_LOCAL_APP="$LOCAL_ROOT/apps/Rack2Pro"

# do this before running VCV Rack, as above
mkdir -p ~/.local/share/VCV
ln -s "$VCV_LOCAL_APP" ~/.local/share/VCV/Rack2Pro
ln -s "$VCV_LOCAL_STORE" ~/.local/share/Rack2

###################
## DaVinci Resolve
###################

# First setup symlink:
DR_LOCAL_STORE="$LOCAL_ROOT/app-settings/DaVinciResolve"

ln -s "$DR_LOCAL_STORE" ~/.local/share/DaVinciResolve

# Next, to install DaVinci Resolve, use davincibox (https://github.com/zelikos/davincibox):
# Note: Required disk space: > 15gb during install, > 10gb after

# (First, get latest DaVinci Resolve from official site and unzip it, or pull from cloud:)
# rclone copy b2:creations/installers/DaVinci_Resolve_18.6.6_Linux.run ~/Downloads
# cd ~/Downloads
# ./DaVinci_Resolve_18.6.6_Linux.run --appimage-extract
# yay -S podman distrobox
# distrobox create -i ghcr.io/zelikos/davincibox:latest -n davincibox
# (if this fails on some issues with UIDs, you may need to run this workaround https://github.com/containers/podman/issues/12715#issuecomment-1436095278)
# distrobox enter davincibox -- setup-davinci squashfs-root/AppRun distrobox
# (Cleanup, to get about 8gb back)
# rm ~/Downloads/DaVinci_Resolve_18.6.6_Linux.run
# rm -rf ~/Downloads/squashfs-root
# (Run via terminal, desktop shortcut fails to start?)
# distrobox enter davincibox -- QT_QPA_PLATFORM=xcb /opt/resolve/bin/resolve
